AWSTemplateFormatVersion: 2010-09-09
Description: Python AWS Lambda for OTA's to easily integrate with the MyAllocator OTA BuildToUs API.
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  SecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Security groups to use (can be the default security group for the VPC)
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnets inside the VPC with connectivity to database instance.
  DatabaseHost:
    Description: Hostname for the MySQL database server
    MaxLength: 256
    MinLength: 5
    Type: String
  DatabaseName:
    Description: Name for the MySQL database
    MaxLength: 64
    MinLength: 1
    Type: String
  DatabaseUser:
    Description: Username for the MySQL database server
    MaxLength: 64
    MinLength: 1
    Type: String
  DatabasePassword:
    Description: Password for the MySQL database username
    MaxLength: 256
    MinLength: 1
    Type: String
    NoEcho: True
  LoggingLevel:
    Description: The level at which to log from the Python functions
    Type: String
    Default: 'INFO'
    AllowedValues:
      - 'CRITICAL'
      - 'ERROR'
      - 'WARNING'
      - 'INFO'
      - 'DEBUG'
  SharedSecret:
    Description: Shared secret from MyAllocator
    MaxLength: 256
    MinLength: 8
    Type: String
    NoEcho: True

Resources:
  MaOtaRouter:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          DB_HOST: !Ref DatabaseHost
          DB_NAME: !Ref DatabaseName
          DB_USER: !Ref DatabaseUser
          DB_PASS: !Ref DatabasePassword
          logging_level: !Ref LoggingLevel
          shared_secret: !Ref SharedSecret
      Handler: index.router
      Runtime: python3.6
      Timeout: 10
      MemorySize: 1536
      VpcConfig:
        SecurityGroupIds: !Ref SecurityGroups
        SubnetIds: !Ref Subnets
      Role: !GetAtt 'LambdaTrustRole.Arn'
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
        PostEvent:
          Type: Api
          Properties:
            Path: /
            Method: post

  LambdaTrustRole:
    Description: Creating service role in IAM for AWS Lambda
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
      Path: /
    Type: 'AWS::IAM::Role'

Outputs:
  LambdaTrustRole:
    Description: Role for AWS Lambda used for passRole to Lambda functions.
    Export:
      Name: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - !Ref 'AWS::Region'
          - LambdaTrustRole
    Value: !GetAtt LambdaTrustRole.Arn